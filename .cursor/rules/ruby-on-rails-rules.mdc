---
description: Apply it when dealing with Ruby on Rails classes, objects, modules and any other *.rb file
alwaysApply: false
---

# Ruby on Rails Standards for Eventaservo

## Documentation
- Use Schema Information annotations generated by the `annotate` gem at the beginning of models.
- For all Ruby classes, modules and methods, use the YARD standard for documentation.
- Document parameters with `@param` and return values with `@return`.

```ruby
# @param user [User] The user to process
# @param options [Hash] Additional options
# @option options [Boolean] :force Force the operation
# @return [Response] Response object with success or failure
def process_user(user:, options: {})
  # implementation
end
```

## Formatting

### Named Parameters
If a method receives an attribute with the same name as a variable, this variable can be omitted:
```ruby
def my_method(user:)
  puts user.name
end

user = User.first
my_method(user:) # Instead of using my_method(user: user)
```

## Service Objects

### Service Structure
Use the `ApplicationService` base class for all services:

```ruby
module UserServices
  class Disable < ApplicationService
    # @param user [User]
    def initialize(user)
      @user = user
    end

    # @return [ApplicationService::Response]
    def call
      if @user.update(disabled: true)
        success(@user)
      else
        failure("Failed to disable user")
      end
    end

    private

    # private methods here
  end
end
```

### Service Organization
- Organize services in modules by domain (Users, Events, etc.)
- Use namespaces to group related services
- Always return Response objects using `success(payload)` or `failure(error)`
- Use `self.call(*args, **kwargs)` for direct calls

## Controllers

### ApplicationController
Always inherit from `ApplicationController` which includes:
- `protect_from_forgery with: :exception`
- `include Pagy::Backend`
- `include Internationalization`
- Sentry and Paper Trail configurations

### Helper Methods
Use `helper_method` to make methods available in views:

```ruby
def user_can_edit_event?(user:, event:)
  return false unless current_user
  return true if user.admin?
  # additional logic
end
helper_method :user_can_edit_event?
```

## Presenters and Components

### Presenters
Use presenters for complex presentation logic:

```ruby
class EventPresenter
  include Rails.application.routes.url_helpers

  attr_reader :event

  # @param event [Event]
  def initialize(event)
    @event = event
  end

  # @return [Hash] Links to add to calendar
  def add_to_calendar_links
    {
      ics: Calendar::AddToCalendarPresenter.new(event:, provider: :ics_file).url,
      google: Calendar::AddToCalendarPresenter.new(event:, provider: :google).url
    }
  end
end
```

## General Patterns

### Constants
- Use `Constants` module for shared constants
- Organize constants by domain when possible

### Error Handling
- Use Sentry for exception capture: `Sentry.capture_exception(e)`
- Configure sensitive parameter filters in `filter_parameter_logging.rb`

### Internationalization
- Configure locales in `application.rb`
- Use hierarchically organized translation keys
